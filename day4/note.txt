day 4:P55-P70

string 对象的 split() 方法只适应于非常简单的字符串分割情形，它并不允许有
多个分隔符或者是分隔符周围不确定的空格。
当你需要更加灵活的切割字符串的时候，最好使用 re.split() 方法
re.split(r'[;,\s]\s*', line)    分隔符可以是逗号，分号或者空格，并且后面紧跟着任意个空格
re.split(r'(?:,|;|\s)\s*', line)效果同上，为非捕获分组
re.split(r'(,|;|\s)\s*', line)  为捕获分组，被匹配的文本也将出现在结果列表中


re.compile() 编译正则表达式字符串，然后使用 match() , findall() 或者 finditer() 等方法


当写正则式字符串的时候，相对普遍的做法是使用原始字符串比如 r'(\d+)/(\d+)/(\d+)' 。
这种字符串将不去解析反斜杠，这在正则表达式中是很有用的。
如果不这样做的话，你必须使用两个反斜杠，类似 '(\\d+)/(\\d+)/(\\d+)' 。 （转义字符）


如果你打算做大量的匹配和搜索操作的话，最好先编译正则表达式，
然后再重复使用它。模块级别的函数会将最近编译过的模式缓存起来，
因此并不会消耗太多的性能，但是如果使用预编译模式的话，你将会减少查找和一些额外的处理损耗。













